{
  "widgetsBundle": {
    "alias": "maputils",
    "title": "MapUtils",
    "image": null
  },
  "widgetTypes": [
    {
      "alias": "newwidget",
      "name": "NewWidget",
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 6,
        "resources": [],
        "templateHtml": "",
        "templateCss": "",
        "controllerScript": "self.onInit = function() {\n    self.ctx.map = new TbMapWidgetV2('openstreet-map',\n        false, self.ctx);\n\n    self.mapleaflet = self.ctx.map.map.map;\n    //self.mapleaflet.panBy([200, 300]);\n    self.mapleaflet.setView([32, 34.95], 9);\n\n\n\n}\n\n\nself.onDataUpdated = function() {\n\n    for (var i in self.mapleaflet._layers) {\n        if (self.mapleaflet._layers[i]._path !==\n            undefined) {\n            try {\n                self.mapleaflet.removeLayer(self.mapleaflet\n                    ._layers[i]);\n            } catch (e) {\n                console.log(\"problem with \" + e + self.mapleaflet\n                    ._layers[i]);\n            }\n        }\n    }\n\n\n    for (i = 0; i < self.ctx.data.length; i++) {\n\n        var dataitem = self.ctx.data[i];\n        var value = String(dataitem.data[0][1]).replace(\n            /'/g, '\"');\n\n        var parsed = JSON.parse(value);\n\n        try {\n            geojsonFeature = parsed.features;\n        } catch (err) {\n            geojsonFeature = null\n        }\n\n        var myStyle = {\n            \"color\": dataitem.dataKey.color,\n            \"opacity\": 0.8\n        };\n\n        try {\n            L.geoJSON(geojsonFeature, {\n                 style: myStyle\n            }).addTo(self.mapleaflet);\n        } catch (e) {\n            console.log(e);\n        }\n        self.ctx.map.update();\n\n\n        /*\n\n                try {\n                    L.geoJSON(\n                        states, {\n                            style: function(\n                                feature\n                            ) {\n                                switch (\n                                    feature\n                                    .properties\n                                    .party\n                                ) {\n                                    case 'Republican':\n                                        return {\n                                            color: \"#ff0000\"\n                                        };\n                                }\n                            }\n                        }).addTo(\n                        self.mapleaflet\n                    );\n                    console.log(\n                        \"Added Features\"\n                    );\n                } catch (e) {\n                    console.log(e);\n\n                }\n                \n                \n        var states = [{\n            \"type\": \"Feature\",\n            \"properties\": {},\n            \"geometry\": {\n                \"type\": \"Polygon\",\n                \"coordinates\": [\n                    [\n                        [32,\n                            35.09981253905925\n                        ],\n                        [32, 35.1],\n                        [31.8, 34]\n                    ]\n                ]\n            }\n        }];\n\n        \n\n        //L.polygon(parsed['x'], {\n        //    color: dataitem.dataKey.color,\n        //    fillColor: dataitem.dataKey.color,\n        //    fillOpacity: 0.5\n        //    }).addTo(self.mapleaflet);\n*/\n    }\n\n}\n\n\nself.onResize = function() {\n    self.ctx.map.resize();\n}\n\nself.getSettingsSchema = function() {\n    var tbScheme = TbMapWidgetV2.settingsSchema(\n        'openstreet-map');\n\n    return tbScheme;\n}\n\nself.getDataKeySettingsSchema =\n    function() {\n        return TbMapWidgetV2.dataKeySettingsSchema(\n            'openstreet-map');\n    }\n\nself.actionSources = function() {\n    return TbMapWidgetV2.actionSources();\n}\n\nself.onDestroy = function() {}",
        "settingsSchema": "{\n    \"schema\": {\n        \"typehttp://127.0.0.1:8080/#\": \"object\",\n        \"title\": \"TimeseriesTableSettings\",\n        \"properties\": {\n            \"values\": {\n                \"title\": \"Isopleth Names\",\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"values\"\n    ]\n}",
        "dataKeySettingsSchema": "",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"NewWidget\"}"
      }
    }
  ]
}