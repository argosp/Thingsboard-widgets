{
    "widgetsBundle": {
      "alias": "eran",
      "title": "Argos-maps",
      "image": null
    },
    "widgetTypes": [
      {
        "alias": "number",
        "name": "TimeseriesPolygonMap",
        "descriptor": {
          "type": "latest",
          "sizeX": 7.5,
          "sizeY": 5.5,
          "resources": [
            {
              "url": ""
            }
          ],
          "templateHtml": "<div flex layout=\"column\" style=\"height: 500px;\">\n    <!--<div>Timeseries Polygon Map</div>-->\n    <table style=\"width: 100%;\">\n        <tbody>\n            <tr>\n                <td style=\"width: 60%\">\n                    <input type=\"range\" name=\"TimeFrame\" id=\"TimeFrame\"\n                        style=\"width: 100%\" value=\"0\"\n                        onchange=\"TimeseriesPolygonMapSelf.onDataUpdated()\" />\n                </td>\n                <td style=\"width: 20%\">\n                    <input type=\"text\" name=\"TimeFrameLabel\"\n                        style=\"width: 100%\" id=\"TimeFrameLabel\"\n                        value=\"0\" />\n                </td>\n                <td style=\"width: 10%\">\n                    <button type=\"button\" style=\"float: right\">Play</button>\n                </td>\n                <td style=\"width: 10%\">\n                    <button type=\"button\" style=\"float: right\" onClick=\"TimeseriesPolygonMapSelf.setNext()\">Next</button>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <table style=\"width: 100%;\">\n        <tbody>\n            <tr>\n                <td id=\"TimeseriesPolygonMap\" style=\"height: 300px\"></td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<!--  <input type=\"range\" name=\"TimeFrame\" id=\"TimeFrame\" value=\"\" />-->\n<!--<div id='TimeseriesPolygonMap'></div>-->",
          "templateCss": "#container {\n    overflow: auto;\n}\n\n.tbDatasource-container {\n    margin: 5px;\n    padding: 8px;\n}\n\n.tbDatasource-title {\n    font-size: 1.200rem;\n    font-weight: 500;\n    padding-bottom: 10px;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    box-shadow: 0 0 10px #ccc;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-size: 1.000rem;\n    color: #757575;\n}\n\n.tbDatasource-table td {\n    position: relative;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0px 18px;\n    box-sizing: border-box;\n}",
          "controllerScript": "self.onInit = function() {\n    var map = $('#TimeseriesPolygonMap');\n    self.ctx.map = new TbMapWidgetV2('openstreet-map',\n        false, self.ctx, undefined, map);\n    self.mapleaflet = self.ctx.map.map.map;\n    $('#TimeseriesPolygonMap')[0].selfRef = self;\n    window.TimeseriesPolygonMapSelf = self;\n    //self.mapleaflet.panBy([200, 300]);    \n    self.mapleaflet.setView([32.7, 34.95], 9);\n    // self.resizeMap();\n}\n\nself.resizeMap = function() {\n    self.mapleaflet._container.style.height = (self.ctx\n        .height - 30) + \"px\";\n}\n\nself.clearPolygons = function() {\n    for (var i in self.mapleaflet._layers) {\n        if (self.mapleaflet._layers[i]._path !==\n            undefined) {\n            try {\n                self.mapleaflet.removeLayer(self.mapleaflet\n                    ._layers[i]);\n            } catch (e) {\n                console.log(\"problem with \" + e + self.mapleaflet\n                    ._layers[i]);\n            }\n\n        }\n    }\n\n}\nfunction parseJson(json) {\n    var value = String(json).replace(/'/g, '\\\"');\n    return JSON.parse(value);\n}\nself.showPolygons = function(parsed, color) {\n    try {\n        geojsonFeature = parsed.features;\n    } catch (err) {\n        return;\n        // geojsonFeature = null\n    }\n    var myStyle = {\n        \"color\": color,\n        \"opacity\": 0.8\n    };\n    try {\n        L.geoJSON(geojsonFeature, {\n            style: myStyle\n        }).addTo(self.mapleaflet);\n    } catch (e) {\n        console.log(e);\n    }\n\n};\n\nself.updateTimeRange = function(parsed) {\n    var maxRange = 0;\n    for (i = 0; i < parsed.length; i++) {\n        // var prop = self.ctx.data[i].data[0][1];\n        // console.log(prop);\n        for (j = 0; j < parsed[i].length; j++) {\n            if (parsed[i][j].index > maxRange) {\n                maxRange = parsed[i][j].index;\n            }\n        }\n    }\n    $('#TimeFrame')[0].max = maxRange;\n};\n\nfunction findCurrFrame(frames, index) {\n    if (frames instanceof Array) {\n        for (var i = 0; i < frames.length; ++i) {\n            if (parseInt(frames[i].index) === index) {\n                return frames[i];\n            }\n        }\n    }\n    return undefined;\n}\n\nself.getCurrIndex = function() {\n    return parseInt($('#TimeFrame')[0].value);\n}\nself.setCurrIndex = function(val) {\n    $('#TimeFrame')[0].value = val;\n    self.onDataUpdated();\n}\nself.onDataUpdated = function() {\n    var parsed = self.ctx.data.map(prop => parseJson(prop.data[0][1]));\n    self.updateTimeRange(parsed);\n    var index = self.getCurrIndex();\n    self.clearPolygons();\n    // console.log(self.ctx.data);\n    for (i = 0; i < self.ctx.data.length; i++) {\n        var poly = findCurrFrame(parsed[i], index);\n        if (!poly) continue;\n        $('#TimeFrameLabel')[0].value = poly.name;\n        var color = self.ctx.data[i].dataKey.color;\n        self.showPolygons(poly.value, color);\n    }\n    self.ctx.map.update();\n}\n\nself.setNext = function() {\n    console.log('111')\n    var maxRange = parseInt($('#TimeFrame')[0].max);\n    if (maxRange >= 1) {\n        self.setCurrIndex((self.getCurrIndex() + 1) % (maxRange + 1));\n    } else {\n        self.setCurrIndex(0);\n    }\n}\n\nself.onResize = function() {\n    self.ctx.map.resize();\n    // self.resizeMap();\n}\n\nself.getSettingsSchema = function() {\n    var tbScheme = TbMapWidgetV2.settingsSchema(\n        'openstreet-map');\n    return tbScheme;\n}\nself.getDataKeySettingsSchema = function() {\n    return TbMapWidgetV2.dataKeySettingsSchema(\n        'openstreet-map');\n}\nself.actionSources = function() {\n    return TbMapWidgetV2.actionSources();\n}\nself.onDestroy = function() {}",
          "settingsSchema": "{}",
          "dataKeySettingsSchema": "{}\n",
          "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"TimeseriesPolygonMap\"}"
        }
      },
      {
        "alias": "polygonmap",
        "name": "PolygonMap",
        "descriptor": {
          "type": "latest",
          "sizeX": 7.5,
          "sizeY": 3,
          "resources": [],
          "templateHtml": "",
          "templateCss": "#container {\n    overflow: auto;\n}\n\n.tbDatasource-container {\n    margin: 5px;\n    padding: 8px;\n}\n\n.tbDatasource-title {\n    font-size: 1.200rem;\n    font-weight: 500;\n    padding-bottom: 10px;\n}\n\n.tbDatasource-table {\n    width: 100%;\n    box-shadow: 0 0 10px #ccc;\n    border-collapse: collapse;\n    white-space: nowrap;\n    font-size: 1.000rem;\n    color: #757575;\n}\n\n.tbDatasource-table td {\n    position: relative;\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n    padding: 0px 18px;\n    box-sizing: border-box;\n}",
          "controllerScript": "self.onInit = function() {\n    self.ctx.map = new TbMapWidgetV2('openstreet-map',        false, self.ctx);\n    self.mapleaflet = self.ctx.map.map.map;\n    //self.mapleaflet.panBy([200, 300]);    \n    self.mapleaflet.setView([32, 34.95], 9);\n}\n\nself.onDataUpdated = function() {\n    \n    for (var i in self.mapleaflet._layers) {\n        if (self.mapleaflet._layers[i]._path !==\n            undefined) {\n            try {\n                self.mapleaflet.removeLayer(self.mapleaflet\n                    ._layers[i]);\n            } catch (e) {\n                console.log(\"problem with \" + e + self.mapleaflet._layers[i]);\n            }\n\n        }\n    }\n    \n    for (i = 0; i < self.ctx.data.length; i++) {\n        var dataitem = self.ctx.data[i];\n        var value = String(dataitem.data[0][1]).replace(/'/g, '\\\"');\n        var parsed = JSON.parse(value);\n        try {\n            geojsonFeature = parsed.features;\n\n        } catch (err) {\n            geojsonFeature = null\n        }\n        var myStyle = {\n            \"color\": dataitem.dataKey.color,            \n            \"opacity\": 0.8        \n        };\n        try {\n            L.geoJSON(geojsonFeature, {\n                style: myStyle\n            }).addTo(self.mapleaflet);\n        } catch (e) {\n            console.log(e);\n        }\n        self.ctx.map.update(); \n        \n    }\n}\nself.onResize = function() {\n    self.ctx.map.resize();\n}\nself.getSettingsSchema = function() {\n    var tbScheme = TbMapWidgetV2.settingsSchema(\n        'openstreet-map');\n    return tbScheme;\n}\nself.getDataKeySettingsSchema = function() {\n    return TbMapWidgetV2.dataKeySettingsSchema('openstreet-map');\n}\nself.actionSources = function() {\n    return TbMapWidgetV2.actionSources();\n}\nself.onDestroy = function() {}\n",
          "settingsSchema": "{}",
          "dataKeySettingsSchema": "{}\n",
          "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"PolygonMap\"}"
        }
      }
    ]
  }